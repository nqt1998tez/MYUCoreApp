// <auto-generated />
using System;
using MYUCoreApp.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MYUCoreApp.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Advertistment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Advertistments");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AdvertistmentPage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertistmentPages");

                    b.HasData(
                        new
                        {
                            Id = "home",
                            Name = "Home"
                        },
                        new
                        {
                            Id = "product-cate",
                            Name = "Product category"
                        },
                        new
                        {
                            Id = "product-detail",
                            Name = "Product detail"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("AdvertistmentPositions");

                    b.HasData(
                        new
                        {
                            Id = "home-left",
                            Name = "Bên trái",
                            PageId = "home"
                        },
                        new
                        {
                            Id = "product-cate-left",
                            Name = "Bên trái",
                            PageId = "product-cate"
                        },
                        new
                        {
                            Id = "product-detail-left",
                            Name = "Bên trái",
                            PageId = "product-detail"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AnnouncementUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnnouncementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool?>("HasRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(null);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementUsers");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1098e4c6-83b5-4b66-bcf1-9ba81a803953"),
                            ConcurrencyStamp = "eaa69623-f846-4079-b354-77ca5d16774f",
                            Description = "Top manager",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f0bb650c-3965-496e-b77c-ec9b4cf8c97b"),
                            ConcurrencyStamp = "f5056127-71ab-4229-a5c2-da56c34622de",
                            Description = "Staff",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("cdf5a4c8-33e5-4151-b81b-11882f340802"),
                            ConcurrencyStamp = "05e0123a-5f26-4fcb-8ff8-09a3fbcb0b55",
                            Description = "Customer",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("362b398d-5031-4ac3-b8c6-efd7107bb330"),
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "841fc806-f7bb-47ab-962d-c88732296f7f",
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 29, DateTimeKind.Local).AddTicks(695),
                            DateModified = new DateTime(2020, 8, 2, 19, 58, 21, 30, DateTimeKind.Local).AddTicks(2619),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Administrator",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.BlogTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            Code = "#FFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            Code = "#ff0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Code = "#1000ff",
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");

                    b.HasData(
                        new
                        {
                            Id = "default",
                            Address = "No 36 Lane 133 Nguyen Phong Sac Cau Giay",
                            Email = "pandashop@gmail.com",
                            Lat = 21.043500900000002,
                            Lng = 105.78947580000001,
                            Name = "Panda Shop",
                            Phone = "0942 324 543",
                            Status = 1,
                            Website = "http://pandashop.com"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Footer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Footers");

                    b.HasData(
                        new
                        {
                            Id = "DefaultFooterId",
                            Content = "Footer"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("IconCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = "SYSTEM",
                            IconCss = "fa-desktop",
                            Name = "System",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "ROLE",
                            IconCss = "fa-home",
                            Name = "Role",
                            ParentId = "SYSTEM",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/role/index"
                        },
                        new
                        {
                            Id = "FUNCTION",
                            IconCss = "fa-home",
                            Name = "Function",
                            ParentId = "SYSTEM",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/function/index"
                        },
                        new
                        {
                            Id = "USER",
                            IconCss = "fa-home",
                            Name = "User",
                            ParentId = "SYSTEM",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/user/index"
                        },
                        new
                        {
                            Id = "ACTIVITY",
                            IconCss = "fa-home",
                            Name = "Activity",
                            ParentId = "SYSTEM",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/activity/index"
                        },
                        new
                        {
                            Id = "ERROR",
                            IconCss = "fa-home",
                            Name = "Error",
                            ParentId = "SYSTEM",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/error/index"
                        },
                        new
                        {
                            Id = "SETTING",
                            IconCss = "fa-home",
                            Name = "Configuration",
                            ParentId = "SYSTEM",
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/setting/index"
                        },
                        new
                        {
                            Id = "PRODUCT",
                            IconCss = "fa-chevron-down",
                            Name = "Product Management",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "PRODUCT_CATEGORY",
                            IconCss = "fa-chevron-down",
                            Name = "Category",
                            ParentId = "PRODUCT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/productcategory/index"
                        },
                        new
                        {
                            Id = "PRODUCT_LIST",
                            IconCss = "fa-chevron-down",
                            Name = "Product",
                            ParentId = "PRODUCT",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/product/index"
                        },
                        new
                        {
                            Id = "BILL",
                            IconCss = "fa-chevron-down",
                            Name = "Bill",
                            ParentId = "PRODUCT",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/bill/index"
                        },
                        new
                        {
                            Id = "CONTENT",
                            IconCss = "fa-table",
                            Name = "Content",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "BLOG",
                            IconCss = "fa-table",
                            Name = "Blog",
                            ParentId = "CONTENT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/blog/index"
                        },
                        new
                        {
                            Id = "PAGE",
                            IconCss = "fa-table",
                            Name = "Page",
                            ParentId = "CONTENT",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/page/index"
                        },
                        new
                        {
                            Id = "UTILITY",
                            IconCss = "fa-clone",
                            Name = "Utilities",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "FOOTER",
                            IconCss = "fa-clone",
                            Name = "Footer",
                            ParentId = "UTILITY",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/footer/index"
                        },
                        new
                        {
                            Id = "FEEDBACK",
                            IconCss = "fa-clone",
                            Name = "Feedback",
                            ParentId = "UTILITY",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/feedback/index"
                        },
                        new
                        {
                            Id = "ANNOUNCEMENT",
                            IconCss = "fa-clone",
                            Name = "Announcement",
                            ParentId = "UTILITY",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/announcement/index"
                        },
                        new
                        {
                            Id = "CONTACT",
                            IconCss = "fa-clone",
                            Name = "Contact",
                            ParentId = "UTILITY",
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/contact/index"
                        },
                        new
                        {
                            Id = "SLIDE",
                            IconCss = "fa-clone",
                            Name = "Slide",
                            ParentId = "UTILITY",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/slide/index"
                        },
                        new
                        {
                            Id = "ADVERTISMENT",
                            IconCss = "fa-clone",
                            Name = "Advertisment",
                            ParentId = "UTILITY",
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/advertistment/index"
                        },
                        new
                        {
                            Id = "REPORT",
                            IconCss = "fa-bar-chart-o",
                            Name = "Report",
                            SortOrder = 5,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = "REVENUES",
                            IconCss = "fa-bar-chart-o",
                            Name = "Revenue report",
                            ParentId = "REPORT",
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/report/revenues"
                        },
                        new
                        {
                            Id = "ACCESS",
                            IconCss = "fa-bar-chart-o",
                            Name = "Visitor Report",
                            ParentId = "REPORT",
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/report/visitor"
                        },
                        new
                        {
                            Id = "READER",
                            IconCss = "fa-bar-chart-o",
                            Name = "Reader Report",
                            ParentId = "REPORT",
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/report/reader"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(255)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionId")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(1876),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 1",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-1",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5199),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 2",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-2",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5260),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 3",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-3",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5264),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 4",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-4",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5266),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 5",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-5",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5269),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 6",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-6",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5271),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 7",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-7",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5274),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 8",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-8",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5277),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 9",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-9",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5279),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 10",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-10",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5281),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 11",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-11",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5284),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 12",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-12",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5286),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 13",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-13",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5290),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 14",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-14",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5292),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 15",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-15",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5295),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 16",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-16",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5297),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 17",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-17",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5299),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 18",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-18",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5368),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 19",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-19",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            DateCreated = new DateTime(2020, 8, 2, 19, 58, 21, 34, DateTimeKind.Local).AddTicks(5371),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 20",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            SeoAlias = "san-pham-20",
                            Status = 1
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HomeFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("HomeOrder")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoPageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Men shirt",
                            SeoAlias = "men-shirt",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Women shirt",
                            SeoAlias = "women-shirt",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Men shoes",
                            SeoAlias = "men-shoes",
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Woment shoes",
                            SeoAlias = "women-shoes",
                            SortOrder = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 3,
                            Name = "L"
                        },
                        new
                        {
                            Id = 4,
                            Name = "M"
                        },
                        new
                        {
                            Id = 5,
                            Name = "S"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XS"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GroupAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 0,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-1.jpg",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 1,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-2.jpg",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 2,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-3.jpg",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 1,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand1.png",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 2,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand2.png",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 3,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand3.png",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 4,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand4.png",
                            Name = "Slide 4",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 5,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand5.png",
                            Name = "Slide 5",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 6,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand6.png",
                            Name = "Slide 6",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 7,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand7.png",
                            Name = "Slide 7",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 11,
                            DisplayOrder = 8,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand8.png",
                            Name = "Slide 8",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 12,
                            DisplayOrder = 9,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand9.png",
                            Name = "Slide 9",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 13,
                            DisplayOrder = 10,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand10.png",
                            Name = "Slide 10",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = 14,
                            DisplayOrder = 11,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand11.png",
                            Name = "Slide 11",
                            Status = true,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.SystemConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value2")
                        .HasColumnType("int");

                    b.Property<bool?>("Value3")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Value4")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value5")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            Id = "HomeTitle",
                            Name = "Home's title",
                            Status = 1,
                            Value1 = "MYU Shop home"
                        },
                        new
                        {
                            Id = "HomeMetaKeyword",
                            Name = "Home Keyword",
                            Status = 1,
                            Value1 = "shopping, sales"
                        },
                        new
                        {
                            Id = "HomeMetaDescription",
                            Name = "Home Description",
                            Status = 1,
                            Value1 = "Home myu"
                        });
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.WholePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ToQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("WholePrices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Advertistment", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.AdvertistmentPosition", "AdvertistmentPosition")
                        .WithMany("Advertistments")
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.AdvertistmentPage", "AdvertistmentPage")
                        .WithMany("AdvertistmentPositions")
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Announcement", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.AnnouncementUser", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementUsers")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Bill", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.BillDetail", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.BlogTag", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Permission", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.AppRole", "AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.Product", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.ProductTag", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYUCoreApp.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MYUCoreApp.Data.Entities.WholePrice", b =>
                {
                    b.HasOne("MYUCoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
